{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '보르바'\n    },\n    content: '첫번째 게시글',\n    img: 'https://newsimg.sedaily.com/2017/09/15/1OL1CMWR9X_1.jpg',\n    Comments: []\n  }],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: '',\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중인지\n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  // 커멘트가 업로드 중인지\n  addCommentErrorReason: '',\n  // 커먼트 업로드 실패 사유\n  commentAdded: false // 커멘트 업로드 성공\n\n};\nvar dummyComment = {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: '조선왕조실룩샐룩'\n  },\n  createdAt: new Date(),\n  content: '나는 더미 댓글입니다.'\n};\nexport var LOAD_MAIN_POST_REQUEST = 'LOAD_MAIN_POST_REQUEST';\nexport var LOAD_MAIN_POST_SUCCESS = 'LOAD_MAIN_POST_SUCCESS';\nexport var LOAD_MAIN_POST_FAILURE = 'LOAD_MAIN_POST_FAILURE';\nexport var LOAD_HASHTAG_POST_REQUEST = 'LOAD_HASHTAG_POST_REQUEST';\nexport var LOAD_HASHTAG_POST_SUCCESS = 'LOAD_HASHTAG_POST_SUCCESS';\nexport var LOAD_HASHTAG_POST_FAILURE = 'LOAD_HASHTAG_POST_FAILURE';\nexport var LOAD_USER_POST_REQUEST = 'LOAD_USER_POST_REQUEST';\nexport var LOAD_USER_POST_SUCCESS = 'LOAD_USER_POST_SUCCESS';\nexport var LOAD_USER_POST_FAILURE = 'LOAD_USER_POST_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport var LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport var LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var LOAD_COMMENT_REQUEST = 'LOAD_COMMENT_REQUEST';\nexport var LOAD_COMMENT_SUCCESS = 'LOAD_COMMENT_SUCCESS';\nexport var LOAD_COMMENT_FAILURE = 'LOAD_COMMENT_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_DUMMY = 'ADD-DUMMY';\nexport var addPost = {\n  type: ADD_POST_REQUEST\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: true,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts)),\n          postAdded: true\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPosts: false,\n          addPostErrorReason: action.error\n        });\n      }\n\n    case LOAD_MAIN_POSTS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoadingPosts: true,\n          loadPostsErrorReason: '',\n          postsloded: false\n        });\n      }\n\n    case LOAD_MAIN_POSTS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoadingPosts: false,\n          mainPosts: [].concat(_toConsumableArray(action.data), _toConsumableArray(state.mainPosts)),\n          postsloaded: true\n        });\n      }\n\n    case LOAD_MAIN_POSTS_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoadingPost: false,\n          loadPostErrorReason: action.error\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: true,\n          addCommentErrorReason: \"\",\n          commentAdded: false\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        var postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n        var post = state.mainPosts[postIndex];\n        var Comments = [].concat(_toConsumableArray(post.Comments), [dummyComment]);\n\n        var mainPosts = _toConsumableArray(state.mainPosts);\n\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments: Comments\n        });\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          mainPosts: mainPosts,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n\n    case ADD_DUMMY:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts))\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/mydevenv/react-nodebird/ch1/front/reducers/index.js"],"names":["initialState","mainPosts","id","User","nickname","content","img","Comments","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","dummyComment","createdAt","Date","LOAD_MAIN_POST_REQUEST","LOAD_MAIN_POST_SUCCESS","LOAD_MAIN_POST_FAILURE","LOAD_HASHTAG_POST_REQUEST","LOAD_HASHTAG_POST_SUCCESS","LOAD_HASHTAG_POST_FAILURE","LOAD_USER_POST_REQUEST","LOAD_USER_POST_SUCCESS","LOAD_USER_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENT_REQUEST","LOAD_COMMENT_SUCCESS","LOAD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_DUMMY","addPost","type","reducer","state","action","data","isAddingPosts","error","isLoadingPosts","loadPostsErrorReason","postsloded","postsloaded","isLoadingPost","loadPostErrorReason","postIndex","findIndex","v","postId","post"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CACP;AACIC,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAFV;AAMIC,IAAAA,OAAO,EAAE,SANb;AAOIC,IAAAA,GAAG,EAAE,yDAPT;AAQIC,IAAAA,QAAQ,EAAE;AARd,GADO,CADa;AAYrB;AACHC,EAAAA,UAAU,EAAE,EAbY;AAaR;AAChBC,EAAAA,kBAAkB,EAAE,EAdI;AAcA;AACxBC,EAAAA,YAAY,EAAE,KAfU;AAeH;AACrBC,EAAAA,SAAS,EAAE,KAhBa;AAgBN;AAClBC,EAAAA,eAAe,EAAE,KAjBO;AAiBA;AACxBC,EAAAA,qBAAqB,EAAE,EAlBC;AAkBG;AAC3BC,EAAAA,YAAY,EAAE,KAnBU,CAmBH;;AAnBG,CAArB;AAuBP,IAAMC,YAAY,GAAG;AACjBb,EAAAA,EAAE,EAAE,CADa;AAEjBC,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR,GAFW;AAMjBY,EAAAA,SAAS,EAAE,IAAIC,IAAJ,EANM;AAOjBZ,EAAAA,OAAO,EAAE;AAPQ,CAArB;AAUA,OAAO,IAAMa,sBAAsB,GAAG,wBAA/B;AACP,OAAO,IAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,IAAMC,sBAAsB,GAAG,wBAA/B;AAEP,OAAO,IAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,IAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,IAAMC,yBAAyB,GAAG,2BAAlC;AAEP,OAAO,IAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,IAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,IAAMC,sBAAsB,GAAG,wBAA/B;AAEP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,IAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AAEP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AAEP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,SAAS,GAAG,WAAlB;AAEP,OAAO,IAAMC,OAAO,GAAG;AACnBC,EAAAA,IAAI,EAAE1B;AADa,CAAhB;;AAKP,IAAM2B,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzB3D,YAAyB;AAAA,MAAX4D,MAAW;;AAC9C,UAAQA,MAAM,CAACH,IAAf;AACI,SAAK1B,gBAAL;AAAuB;AACnB,iCACO4B,KADP;AAEIjD,UAAAA,YAAY,EAAE,IAFlB;AAGID,UAAAA,kBAAkB,EAAE,EAHxB;AAIIE,UAAAA,SAAS,EAAE;AAJf;AAMH;;AACD,SAAKqB,gBAAL;AAAuB;AACnB,iCACO2B,KADP;AAEIjD,UAAAA,YAAY,EAAE,KAFlB;AAGIT,UAAAA,SAAS,GAAG2D,MAAM,CAACC,IAAV,4BAAmBF,KAAK,CAAC1D,SAAzB,EAHb;AAIIU,UAAAA,SAAS,EAAE;AAJf;AAMH;;AACD,SAAKsB,gBAAL;AAAuB;AACnB,iCACO0B,KADP;AAEIG,UAAAA,aAAa,EAAE,KAFnB;AAGIrD,UAAAA,kBAAkB,EAAEmD,MAAM,CAACG;AAH/B;AAKH;;AAED,SAAK7B,uBAAL;AAA8B;AAC1B,iCACOyB,KADP;AAEIK,UAAAA,cAAc,EAAE,IAFpB;AAGIC,UAAAA,oBAAoB,EAAE,EAH1B;AAIIC,UAAAA,UAAU,EAAE;AAJhB;AAMH;;AACD,SAAK/B,uBAAL;AAA8B;AAC1B,iCACOwB,KADP;AAEIK,UAAAA,cAAc,EAAE,KAFpB;AAGI/D,UAAAA,SAAS,+BAAM2D,MAAM,CAACC,IAAb,sBAAsBF,KAAK,CAAC1D,SAA5B,EAHb;AAIIkE,UAAAA,WAAW,EAAE;AAJjB;AAMH;;AACD,SAAK/B,uBAAL;AAA8B;AAC1B,iCACOuB,KADP;AAEIS,UAAAA,aAAa,EAAE,KAFnB;AAGIC,UAAAA,mBAAmB,EAAET,MAAM,CAACG;AAHhC;AAKH;;AAED,SAAKpB,mBAAL;AAA0B;AACtB,iCACOgB,KADP;AAEI/C,UAAAA,eAAe,EAAE,IAFrB;AAGIC,UAAAA,qBAAqB,EAAE,EAH3B;AAIIC,UAAAA,YAAY,EAAE;AAJlB;AAMH;;AACD,SAAK8B,mBAAL;AAA0B;AACtB,YAAM0B,SAAS,GAAGX,KAAK,CAAC1D,SAAN,CAAgBsE,SAAhB,CACd,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACtE,EAAF,KAAS0D,MAAM,CAACC,IAAP,CAAYY,MAAzB;AAAA,SADa,CAAlB;AAGA,YAAMC,IAAI,GAAGf,KAAK,CAAC1D,SAAN,CAAgBqE,SAAhB,CAAb;AACA,YAAM/D,QAAQ,gCAAOmE,IAAI,CAACnE,QAAZ,IAAsBQ,YAAtB,EAAd;;AACA,YAAMd,SAAS,sBAAO0D,KAAK,CAAC1D,SAAb,CAAf;;AACAA,QAAAA,SAAS,CAACqE,SAAD,CAAT,qBAA4BI,IAA5B;AAAkCnE,UAAAA,QAAQ,EAARA;AAAlC;AACA,iCACOoD,KADP;AAEI/C,UAAAA,eAAe,EAAE,KAFrB;AAGIX,UAAAA,SAAS,EAATA,SAHJ;AAIIa,UAAAA,YAAY,EAAE;AAJlB;AAMH;;AACD,SAAK+B,mBAAL;AAA0B;AACtB,iCACOc,KADP;AAEI/C,UAAAA,eAAe,EAAE,KAFrB;AAGIC,UAAAA,qBAAqB,EAAE+C,MAAM,CAACG;AAHlC;AAKH;;AAED,SAAKR,SAAL;AAAgB;AACZ,iCACOI,KADP;AAEI1D,UAAAA,SAAS,GAAG2D,MAAM,CAACC,IAAV,4BAAmBF,KAAK,CAAC1D,SAAzB;AAFb;AAIH;;AACD;AAAS;AACL,iCACO0D,KADP;AAGH;AA1FL;AA4FH,CA7FD;;AA+FA,eAAeD,OAAf","sourcesContent":["export const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1,\r\n                nickname: '보르바',\r\n            },\r\n            content: '첫번째 게시글',\r\n            img: 'https://newsimg.sedaily.com/2017/09/15/1OL1CMWR9X_1.jpg',\r\n            Comments: [],\r\n        },\r\n    ], // 화면에 보일 포스트들\r\n    imagePaths: [], // 미리보기 이미지 경로\r\n    addPostErrorReason: '', // 포스트 업로드 실패 사유\r\n    isAddingPost: false, // 포스트 업로드 중인지\r\n    postAdded: false, // 포스트 업로드 성공\r\n    isAddingComment: false, // 커멘트가 업로드 중인지\r\n    addCommentErrorReason: '', // 커먼트 업로드 실패 사유\r\n    commentAdded: false, // 커멘트 업로드 성공\r\n};\r\n\r\n\r\nconst dummyComment = {\r\n    id: 1,\r\n    User: {\r\n        id: 1,\r\n        nickname: '조선왕조실룩샐룩',\r\n    },\r\n    createdAt: new Date(),\r\n    content: '나는 더미 댓글입니다.',\r\n};\r\n\r\nexport const LOAD_MAIN_POST_REQUEST = 'LOAD_MAIN_POST_REQUEST';\r\nexport const LOAD_MAIN_POST_SUCCESS = 'LOAD_MAIN_POST_SUCCESS';\r\nexport const LOAD_MAIN_POST_FAILURE = 'LOAD_MAIN_POST_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POST_REQUEST = 'LOAD_HASHTAG_POST_REQUEST';\r\nexport const LOAD_HASHTAG_POST_SUCCESS = 'LOAD_HASHTAG_POST_SUCCESS';\r\nexport const LOAD_HASHTAG_POST_FAILURE = 'LOAD_HASHTAG_POST_FAILURE';\r\n\r\nexport const LOAD_USER_POST_REQUEST = 'LOAD_USER_POST_REQUEST';\r\nexport const LOAD_USER_POST_SUCCESS = 'LOAD_USER_POST_SUCCESS';\r\nexport const LOAD_USER_POST_FAILURE = 'LOAD_USER_POST_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_COMMENT_REQUEST = 'LOAD_COMMENT_REQUEST';\r\nexport const LOAD_COMMENT_SUCCESS = 'LOAD_COMMENT_SUCCESS';\r\nexport const LOAD_COMMENT_FAILURE = 'LOAD_COMMENT_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_DUMMY = 'ADD-DUMMY';\r\n\r\nexport const addPost = {\r\n    type: ADD_POST_REQUEST,\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: true,\r\n                addPostErrorReason: '',\r\n                postAdded: false,\r\n            };\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                mainPosts: [action.data, ...state.mainPosts],\r\n                postAdded: true,\r\n            };\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingPosts: false,\r\n                addPostErrorReason: action.error,\r\n            };\r\n        }\r\n\r\n        case LOAD_MAIN_POSTS_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isLoadingPosts: true,\r\n                loadPostsErrorReason: '',\r\n                postsloded: false,\r\n            };\r\n        }\r\n        case LOAD_MAIN_POSTS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLoadingPosts: false,\r\n                mainPosts: [...action.data, ...state.mainPosts],\r\n                postsloaded: true,\r\n            };\r\n        }\r\n        case LOAD_MAIN_POSTS_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isLoadingPost: false,\r\n                loadPostErrorReason: action.error,\r\n            };\r\n        }\r\n\r\n        case ADD_COMMENT_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: true,\r\n                addCommentErrorReason: \"\",\r\n                commentAdded: false\r\n            };\r\n        }\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const postIndex = state.mainPosts.findIndex(\r\n                v => v.id === action.data.postId\r\n            );\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = [...post.Comments, dummyComment];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                mainPosts,\r\n                commentAdded: true,\r\n            };\r\n        }\r\n        case ADD_COMMENT_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                addCommentErrorReason: action.error,\r\n            };\r\n        }\r\n\r\n        case ADD_DUMMY: {\r\n            return {\r\n                ...state,\r\n                mainPosts: [action.data, ...state.mainPosts],\r\n            };\r\n        }\r\n        default: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}