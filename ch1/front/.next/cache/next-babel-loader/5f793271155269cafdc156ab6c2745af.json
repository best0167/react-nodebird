{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, LOAD_USER_REQUEST, LOAD_USER_FAILURE, LOAD_USER_SUCCESS } from '../reducers/user';\n\nfunction loginAPI(logIndata) {\n  return axios.post('/login');\n}\n\nfunction signupAPI(signUpData) {\n  return axios.post('/user/', signUpData);\n} // function loginAPI() {}\n\n\nfunction logoutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction loaduserAPI() {\n  return axios.get('/user/');\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signupAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* logIn(action) {\n  try {\n    /*yield call(loginAPI);*/\n    yield delay(2000);\n    yield put({\n      type: LOAD_USER_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loaduserAPI);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE\n    });\n  }\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignup), fork(watchLogout), fork(watchLoadUser)]);\n}","map":{"version":3,"sources":["C:/mydevenv/react-nodebird/ch1/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","LOAD_USER_REQUEST","LOAD_USER_FAILURE","LOAD_USER_SUCCESS","loginAPI","logIndata","post","signupAPI","signUpData","logoutAPI","loaduserAPI","get","signUp","action","data","type","e","console","error","logIn","logOut","result","loadUser","watchSignup","watchLogin","watchLogout","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import {\r\n    all, fork, takeLatest, call, put, delay,\r\n} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_SUCCESS,\r\n    LOAD_USER_REQUEST,\r\n    LOAD_USER_FAILURE,\r\n    LOAD_USER_SUCCESS,\r\n} from '../reducers/user';\r\n\r\nfunction loginAPI(logIndata) {\r\n    return axios.post('/login');\r\n}\r\n\r\nfunction signupAPI(signUpData) {\r\n    return axios.post('/user/', signUpData);\r\n}\r\n// function loginAPI() {}\r\nfunction logoutAPI() {\r\n    return axios.post('/user/logout');\r\n}\r\nfunction loaduserAPI() {\r\n    return axios.get('/user/');\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        yield call(signupAPI, action.data);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        /*yield call(loginAPI);*/\r\n        yield delay(2000);\r\n        yield put({\r\n            type: LOAD_USER_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        const result = yield call(logoutAPI);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* loadUser() {\r\n    try {\r\n        const result = yield call(loaduserAPI);\r\n        yield put({\r\n            type: LOAD_USER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_USER_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignup() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogout() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\n\r\nfunction* watchLoadUser() {\r\n    yield takeLatest(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([fork(watchLogin), fork(watchSignup), fork(watchLogout), fork(watchLoadUser)]);\r\n}"]},"metadata":{},"sourceType":"module"}