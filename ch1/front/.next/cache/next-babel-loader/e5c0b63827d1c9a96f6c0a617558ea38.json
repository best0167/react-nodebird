{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction loadPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error\n    });\n  }\n}\n\nfunction* loadPosts() {\n  try {\n    const result = yield call(loadPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadPosts);\n}\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  try {\n    // yield call(addCommentAPI);\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/mydevenv/react-nodebird/ch1/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_SUCCESS","addPostAPI","postData","post","withCredentials","loadPostsAPI","get","addPost","action","result","data","type","error","console","loadPosts","watchAddPost","watchLoadPosts","addCommentAPI","addComment","postId","watchAddComment","postSaga"],"mappings":"AAAA,SACIA,GADJ,EACSC,IADT,EACeC,UADf,EAC2BC,GAD3B,EACgCC,KADhC,EACuCC,IADvC,QAEO,oBAFP;AAGA,OAAOC,KAAP,MACS,OADT;AAEA,SACIC,gBADJ,EACsBC,gBADtB,EACwCC,gBADxC,EAC0DC,mBAD1D,EAC+EC,mBAD/E,EAEIC,mBAFJ,EAEyBC,uBAFzB,EAEkDC,uBAFlD,EAE2EC,uBAF3E,QAGO,kBAHP;;AAKA,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,SAAOX,KAAK,CAACY,IAAN,CAAW,OAAX,EAAoBD,QAApB,EAA8B;AACjCE,IAAAA,eAAe,EAAE;AADgB,GAA9B,CAAP;AAGH;;AAED,SAASC,YAAT,GAAwB;AACpB,SAAOd,KAAK,CAACe,GAAN,CAAU,QAAV,CAAP;AACH;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMnB,IAAI,CAACW,UAAD,EAAaO,MAAM,CAACE,IAApB,CAAzB;AACA,UAAMtB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAElB,gBADA;AAENiB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOE,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMxB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEjB,gBADA;AAENkB,MAAAA;AAFM,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUE,SAAV,GAAsB;AAClB,MAAI;AACA,UAAML,MAAM,GAAG,MAAMnB,IAAI,CAACe,YAAD,CAAzB;AACA,UAAMjB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEX,uBADA;AAENU,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOE,KAAP,EAAc;AACZ,UAAMxB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEZ,uBADA;AAENa,MAAAA;AAFM,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUG,YAAV,GAAyB;AACrB,QAAM5B,UAAU,CAACK,gBAAD,EAAmBe,OAAnB,CAAhB;AACH;;AAED,UAAUS,cAAV,GAA2B;AACvB,QAAM7B,UAAU,CAACW,uBAAD,EAA0BgB,SAA1B,CAAhB;AACH;;AAED,SAASG,aAAT,GAAyB,CAExB;;AAED,UAAUC,UAAV,CAAqBV,MAArB,EAA6B;AACzB,MAAI;AACA;AACA,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEf,mBADA;AAENc,MAAAA,IAAI,EAAE;AACFS,QAAAA,MAAM,EAAEX,MAAM,CAACE,IAAP,CAAYS;AADlB;AAFA,KAAD,CAAT;AAMH,GATD,CASE,OAAOP,KAAP,EAAc;AACZ,UAAMxB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEd,mBADA;AAENe,MAAAA;AAFM,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUQ,eAAV,GAA4B;AACxB,QAAMjC,UAAU,CAACQ,mBAAD,EAAsBuB,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMpC,GAAG,CAAC,CACNC,IAAI,CAAC8B,cAAD,CADE,EAEN9B,IAAI,CAAC6B,YAAD,CAFE,EAGN7B,IAAI,CAACkC,eAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import {\r\n    all, fork, takeLatest, put, delay, call,\r\n} from 'redux-saga/effects';\r\nimport axios\r\n    from 'axios';\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_SUCCESS,\r\n} from '../reducers/post';\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post('/post', postData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction loadPostsAPI() {\r\n    return axios.get('/posts')\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* loadPosts() {\r\n    try {\r\n        const result = yield call(loadPostsAPI);\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction addCommentAPI() {\r\n\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // yield call(addCommentAPI);\r\n        yield delay(2000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchLoadPosts),\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}